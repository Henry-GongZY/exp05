lno@0  @73  NODE_PROG    children:[@1 ]
lno@2  @1  NODE_MAIN    children:[@0 @5 @8 @11 @14 @15 @18 @72 ]
lno@2  @0  NODE_TYPE  void  children:[]
lno@3  @5  NODE_STMT  STMT_DECL  children:[@2 @3 @4 ]
lno@3  @2  NODE_TYPE  int  children:[]
lno@3  @3  NODE_VAR  var name: a type: int  children:[]
lno@3  @4  NODE_VAR  var name: s type: int  children:[]
lno@4  @8  NODE_STMT  =  children:[@6 @7 ]
lno@4  @6  NODE_VAR  var name: a type: int  children:[]
lno@4  @7  NODE_CONST  int:10  children:[]
lno@5  @11  NODE_STMT  +=  children:[@9 @10 ]
lno@5  @9  NODE_VAR  var name: s type: int  children:[]
lno@5  @10  NODE_CONST  int:0  children:[]
lno@6  @14  NODE_STMT  STMT_DECL  children:[@12 @13 ]
lno@6  @12  NODE_TYPE  char  children:[]
lno@6  @13  NODE_VAR  var name: ch type: char  children:[]
lno@7  @15  NODE_STMT  STMT_SCANF  children:[@16 @17 ]
lno@7  @16  NODE_CONST  string:"%c"  children:[]
lno@7  @17  NODE_VAR  var name: ch type: char  children:[]
lno@8  @18  NODE_STMT  STMT_PRINTF  children:[@19 @20 ]
lno@8  @19  NODE_CONST  string:"%c"  children:[]
lno@8  @20  NODE_VAR  var name: ch type: char  children:[]
lno@8  @72  NODE_STMT  STMT_WHILE  children:[@28 @36 @39 @42 @71 ]
lno@9  @28  NODE_EXPR  OP: || type: bool  children:[@24 @32 ]
lno@9  @24  NODE_EXPR  OP: && type: bool  children:[@22 @26 ]
lno@9  @22  NODE_EXPR  OP: > type: bool  children:[@21 @23 ]
lno@9  @21  NODE_VAR  var name: a type: int  children:[]
lno@9  @23  NODE_CONST  int:0  children:[]
lno@9  @26  NODE_EXPR  OP: <= type: bool  children:[@25 @27 ]
lno@9  @25  NODE_VAR  var name: a type: int  children:[]
lno@9  @27  NODE_CONST  int:10  children:[]
lno@9  @32  NODE_EXPR  OP: == type: bool  children:[@30 @33 ]
lno@9  @30  NODE_EXPR  OP: % type: int  children:[@29 @31 ]
lno@9  @29  NODE_VAR  var name: a type: int  children:[]
lno@9  @31  NODE_CONST  int:100  children:[]
lno@9  @33  NODE_CONST  int:10  children:[]
lno@10  @36  NODE_STMT  -=  children:[@34 @35 ]
lno@10  @34  NODE_VAR  var name: a type: int  children:[]
lno@10  @35  NODE_CONST  int:1  children:[]
lno@11  @39  NODE_STMT  =  children:[@37 @38 ]
lno@11  @37  NODE_VAR  var name: a type: int  children:[]
lno@11  @38  NODE_CONST  int:10  children:[]
lno@12  @42  NODE_STMT  +=  children:[@40 @41 ]
lno@12  @40  NODE_VAR  var name: s type: int  children:[]
lno@12  @41  NODE_VAR  var name: a type: int  children:[]
lno@12  @71  NODE_STMT  STMT_IF  children:[@44 @47 @52 @55 @58 @70 ]
lno@13  @44  NODE_EXPR  OP: >  children:[@43 @45 ]
lno@13  @43  NODE_VAR  var name: s type: int  children:[]
lno@13  @45  NODE_EXPR  OP: - type: int  children:[@46 ]
lno@13  @46  NODE_CONST  int:10  children:[]
lno@14  @47  NODE_STMT  STMT_PRINTF  children:[@48 @49 ]
lno@14  @48  NODE_CONST  string:"result is: %d\n"  children:[]
lno@14  @49  NODE_VAR  var name: s type: int  children:[]
lno@15  @52  NODE_STMT  STMT_DECL  children:[@50 @51 ]
lno@15  @50  NODE_TYPE  int  children:[]
lno@15  @51  NODE_VAR  var name: b type: int  children:[]
lno@16  @55  NODE_STMT  =  children:[@53 @54 ]
lno@16  @53  NODE_VAR  var name: b type: int  children:[]
lno@16  @54  NODE_CONST  int:10  children:[]
lno@17  @58  NODE_STMT  STMT_DECL  children:[@56 @57 ]
lno@17  @56  NODE_TYPE  int  children:[]
lno@17  @57  NODE_VAR  var name: i type: int  children:[]
lno@17  @70  NODE_STMT  STMT_FOR  children:[@61 @63 @66 @67 ]
lno@18  @61  NODE_STMT  =  children:[@59 @60 ]
lno@18  @59  NODE_VAR  var name: i type: int  children:[]
lno@18  @60  NODE_CONST  int:0  children:[]
lno@18  @63  NODE_EXPR  OP: <  children:[@62 @64 ]
lno@18  @62  NODE_VAR  var name: i type: int  children:[]
lno@18  @64  NODE_VAR  var name: b type: int  children:[]
lno@18  @66  NODE_EXPR  OP: ++  children:[@65 ]
lno@18  @65  NODE_VAR  var name: i type: int  children:[]
lno@19  @67  NODE_STMT  STMT_PRINTF  children:[@68 @69 ]
lno@19  @68  NODE_CONST  string:"Have fun: %d\n"  children:[]
lno@19  @69  NODE_VAR  var name: i type: int  children:[]
a  int,b  int,ch  char,i  int,s  int,